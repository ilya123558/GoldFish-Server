// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------------------------------------------------
// COTALOG
// --------------------------------------------------------------------------------------------

model Cotalog {
  url        String     @id
  title      String
  categories Category[]
  products   Product[]
}

// --------------------------------------------------------------------------------------------
// CATEGORY
// --------------------------------------------------------------------------------------------

model Category {
  url        String    @id
  title      String
  products   Product[]
  cotalog    Cotalog?  @relation(fields: [cotalogUrl], references: [url])
  cotalogUrl String?
}

// --------------------------------------------------------------------------------------------
// EVENT
// --------------------------------------------------------------------------------------------

model Event {
  url      String @id
  title    String
  subTitle String
  date     String
}

// --------------------------------------------------------------------------------------------
// USER
// --------------------------------------------------------------------------------------------

model User {
  id                    String         @id
  email                 String         @unique
  password              String
  name                  String
  lastName              String
  phone                 String?
  imgSrc                String?
  discountPoints        Int?
  status                EnumUserStatus
  activationEmailString String?
  profile               Profile?
  basket                Basket?
  orders                Order[]
}

// --------------------------------------------------------------------------------------------
// BASKET
// --------------------------------------------------------------------------------------------

model Basket {
  id              String            @id
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  basketToProduct BasketToProduct[]
}

// --------------------------------------------------------------------------------------------
// ORDER
// --------------------------------------------------------------------------------------------

model Order {
  id     String  @id
  date   String
  price  Int
  paid   Boolean
  userId String
  user   User    @relation(fields: [userId], references: [id])
}

// --------------------------------------------------------------------------------------------
// PRODUCT
// --------------------------------------------------------------------------------------------

model Product {
  id              Int                     @id @default(autoincrement())
  cotalog         Cotalog                 @relation(fields: [cotalogUrl], references: [url])
  category        Category                @relation(fields: [categoryUrl], references: [url])
  cotalogUrl      String
  categoryUrl     String
  ageLimit        Int
  imgSrcList      String[]
  playersFrom     Int
  playersTo       Int
  price           Float
  timeFrom        Int
  timeTo          Int
  title           String
  description     String
  characteristics String
  rules           String
  url             String
  count           Int
  availability    EnumProductAvailability
  discount        Int?
  faq             FAQ[]
  basketToProduct BasketToProduct[]
}

// --------------------------------------------------------------------------------------------
// BASKET_TO_PRODUCT
// --------------------------------------------------------------------------------------------

model BasketToProduct {
  id        String  @id
  quantity  Int
  basketId  String
  productId Int
  basket    Basket  @relation(fields: [basketId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------------------------------
// FAQ
// --------------------------------------------------------------------------------------------

model FAQ {
  id        Int     @id @default(autoincrement())
  question  String
  answer    String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

// --------------------------------------------------------------------------------------------
// PROFILE
// --------------------------------------------------------------------------------------------

model Profile {
  id     String @id
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// --------------------------------------------------------------------------------------------
// ENUMS
// --------------------------------------------------------------------------------------------

enum EnumProductAvailability {
  available
  forOrdering
  unavailable
}

enum EnumUserStatus {
  pending
  active
}

// npx prisma migrate dev --name [migrate name]
// npx prisma migrate deploy
// npx prisma generate
